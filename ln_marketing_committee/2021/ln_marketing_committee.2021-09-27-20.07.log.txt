20:07:38 <ariard> #startmeeting LN marketing committee
20:07:38 <lndev-bot> Meeting started Mon Sep 27 20:07:38 2021 UTC and is due to finish in 60 minutes.  The chair is ariard. Information about MeetBot at http://wiki.debian.org/MeetBot.
20:07:38 <lndev-bot> Useful Commands: #action #agreed #help #info #idea #link #topic #startvote.
20:07:38 <lndev-bot> The meeting name has been set to 'ln_marketing_committee'
20:07:40 <t-bast> Please diverge from the item order in the issue!
20:11:41 <ariard> mschmoock: iiuc it's either #911 or #917 ?
20:11:42 <BlueMatt> I'm game for either. networking is hard, lots of issues with any option.
20:12:00 <mschmoock> well, lot of back and forth. I think 917 is better
20:12:00 <BlueMatt> honestly could do both, but at least 917 is probably a better first-pass imo if only because it means less setup on the admin end
20:12:27 <t-bast> I'd slightly prefer avoiding using DNS explicitly, so #917 for me, but I don't have a strong NACK on #911 though
20:12:29 <BlueMatt> t-bast: had said concept ack on 917 and said he was gonna start coding :)
20:12:39 <mschmoock> is there any usage of #917 when using IPv6 addresses ? Is there something like IPv6 NAT??
20:12:53 <BlueMatt> mschmoock: yes, there is address mapping in v6
20:13:01 <BlueMatt> so i think it may be useful for v6 as well
20:13:06 <mschmoock> good
20:13:07 <BlueMatt> its probably also useful for tor
20:13:23 <BlueMatt> though somewhat less so
20:13:26 <t-bast> Can you detail why it's useful for tor?
20:14:09 <t-bast> To check the bridges used (bridge isn't the right term, is it)?
20:14:13 <BlueMatt> just means a node can auto-discover its addresses with zero configuration. eg if you configure tor but forget to configure your ln node, and then tell someone to connect to you on tor, *boom* your ln node is now configured
20:14:25 <BlueMatt> which seems nifty, but, indeed, isnt exactly a headline features
20:14:42 <t-bast> Oh ok, so you'd really put the onion address in there
20:15:11 <BlueMatt> yea, just putting "I think I'm connecting to 10.X" isnt exactly useful :)
20:15:51 <cdecker[m]> Or Tor will return 127.0.0.1 always :-)
20:16:01 <BlueMatt> right or that
20:16:01 <mschmoock> Okay, when we discover some new address supposedly of our node, whats the best strategy to use that? BlueMatt mentioned just to broadcast 'all' (maybe upt to a limit)
20:16:18 <cdecker[m]> So needs to filter local addrs
20:16:20 <BlueMatt> yea, i dunno, doesn't need to be in the spec imo.
20:16:29 <BlueMatt> just "dont include local addresses" could be mentioned
20:16:48 <BlueMatt> but nodes can figure out for themselves how they want to use the addresses provided, including them all is cool, trying to filter is cool too.
20:16:57 <roasbeef> ye re #910, I think we just need more impls, we're working on one in the background, but also considering how the pubkey based routing proposal would also serve to simplify certain aspects of it
20:17:36 <roasbeef> made a comment on #917 that it doesn't really seem to be an alternative to #911: https://github.com/lightningnetwork/lightning-rfc/pull/917#issuecomment-928235635
20:18:18 <mschmoock> BlueMatt: by "dont iclude local addresses"  you mean more than the note about pricate addresses I already added?
20:18:34 <BlueMatt> mschmoock: yes, but I hadnt realized you'd done that already :)
20:18:44 <mschmoock> k
20:18:47 <t-bast> roasbeef: true, both could potentially be used for different purposes
20:19:10 <roasbeef> t-bast: yeh the DNS thing seems really useful for ppl managing automated fleets of nodes
20:19:17 <rusty> 911/917: Hmm, you'd need to open a port either way.  But I agree it's not really an alternative; people *do* run dyndns, and that works, using your peers to get your current address; it's probably harmless to do, but it's a bit weird.
20:19:28 <mschmoock> I have 911 half implemented. 917 is easy
20:19:30 <roasbeef> rn we have a setting where lnd will hit a DNS record and then advertise the new IP addr as a workaround, since we don't support DNS names within the node_ann
20:19:44 <roasbeef> since when we spin up a new node, we may not yet know what the reachable IP of it is gonna be
20:19:48 <cdecker[m]> We should mkae sure this doesnt end up with all NATed and unconnectable node anns
20:20:23 <BlueMatt> rusty: fwiw, bitcoin core uses "what my peer told me my ip address is" for advertisements to some extent and it works reasonably. of course its different in core cause you don't care if its "my" ip vs "a node's ip" but still
20:20:47 <BlueMatt> cdecker[m]: presumably ignoring local addresses suffices?
20:21:03 <roasbeef> cdecker[m]: things are kiiiinda like that rn w/ how many nodes are tor only these days
20:21:29 <cdecker[m]> No if you tell me I'm seeing you as x.y.z and then you use that in your ann it still means you're unrachable
20:21:50 <rusty> We already have a local addr filter for our auto-announce stuff, so this is pretty easy.  Oh, BTW we're moving to 15-45 second pings for all connections in next release, because ppl were complaining about Tor circuits breaking and them only finding out when trying to send an HTLC...
20:22:17 <BlueMatt> we tried to move to 5 second pings, now all my lnd peers drop off regularly
20:22:17 <BlueMatt> but c-lightning peers seem totally fine
20:22:31 <BlueMatt> but I think we'll stick with 5 second pings, tbh
20:22:33 <rusty> BlueMatt spec says once per minute, IIRC.
20:22:38 <mschmoock> theres some spam limit on pings...
20:22:47 <BlueMatt> i know it does, but we had the same problem as you, and even worse on mobile cause of ios limits....
20:22:56 <rusty> - SHOULD NOT send `ping` messages more often than once every 30 seconds.
20:23:13 <BlueMatt> maybe we should drop that, that's not really practical on mobile, especially ios
20:23:22 <mschmoock> (and should not send another ping when the pong has not been received)
20:23:23 <BlueMatt> I'll follow up, I had forgotten that was there, thanks
20:23:32 <rusty> BlueMatt: +1
20:23:35 <BlueMatt> mschmoock: well that's easy, we just disconnect if the pong wasn't received!
20:23:58 <mschmoock> sure
20:24:18 <BlueMatt> anyway, seems we're done with 917?
20:24:20 <BlueMatt> next topic?
20:24:22 <mschmoock> just wanted to note repreating a ping may result in spam on the other side when there was TCP jam
20:24:24 <ariard> oky, so let's end up with both 911 and 917 as it offers more flexibility to node operators?
20:25:00 <BlueMatt> pending further discussion and implementaiton of course, but, I'm fine with both.
20:25:08 <mschmoock> we could prioritize 917 as its simpler
20:25:15 <t-bast> ACK
20:25:17 <mschmoock> well both are simple
20:25:37 <ariard> #topic #912
20:25:48 <roasbeef> BlueMatt: yeh I saw that issue, we had really low values there, but then raied it a ton, once we started testing from diff locations, throw in tor/mobile, etc, etc
20:25:56 <cdecker[m]> ACK, it also takes the longest to bear fruit
20:26:01 <roasbeef> generally the timeouts prob need to be longer than you anticipate is what we've leanred over the years
20:26:30 <ariard> what's the state of ML discussion on 912 ?
20:26:32 <BlueMatt> roasbeef: I dont think I filed an issue? but, in my case its not a tor or mobile issue, its just lnd ignoring pings, cause its clearnet and actual pings are fine
20:26:44 <BlueMatt> or lnd being blocked doing other things, i dunno
20:26:56 <roasbeef> there was some other issue on teh RL repo, where someone found that RL was disconnecting from lnd peers due to some like queueing thing...would need to go find it
20:27:40 <roasbeef> we respond to pings right away and don't add them to some processing queue, I think we was something related to like initial graph download and pings at the same time or the idle conn timer, can go find the link later
20:27:49 <t-bast> There is more rationale about #912 on the ML, Joost clearly laid out how that can be used to create invoices without storing anything until it's paid
20:27:53 <BlueMatt> roasbeef: https://github.com/lightningnetwork/lnd/issues/4006 you mean? that's not an RL bug, but we've now got explicit code to handle it just like c-lightning does....it'd be really nice if y'all fixed it to be spec-compliant
20:28:11 <roasbeef> BlueMatt: no that's not it
20:28:35 <BlueMatt> roasbeef: we dont (materially) queue graph messages or pings? unless y'all just dump the whole graph into the send queue? In any case, I do not see this issue with c-lightning
20:28:42 <BlueMatt> and its rare enough that I dont care much
20:28:54 <ariard> t-bast: and you pointed it's coming for free with route blinding ?
20:28:56 <t-bast> #link https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-September/003236.html
20:29:13 <BlueMatt> anyway, on-topic... by "its free with route blinding" you just mean that you have ~the same feature in route blinding, no?
20:29:22 <BlueMatt> so its easy to land this pr and then use it in route blinding instead of a new field?
20:29:26 <t-bast> ariard: yep, in route blinding we already have an encrypted field that is provided by the final recipient that the sender must include in the final payload
20:29:40 <t-bast> ariard: so that can enable stateless invoices as well
20:30:20 <t-bast> BlueMatt: it couldn't be used directly in route blinding, it has to be layered inside a different tlv stream, but it's easy to reuse code though
20:30:40 <BlueMatt> ah, ok
20:30:51 <t-bast> I was pointing it out, but route blinding isn't a reason to *not* do #912 now
20:31:10 <t-bast> too many negations in my sentence...
20:31:24 <t-bast> TL;DR: #912 seems useful on its own :)
20:31:39 <BlueMatt> ok, cool
20:31:40 <BlueMatt> agreed
20:31:41 <BlueMatt> lets do it :)
20:31:44 <BlueMatt> implementations plz :)
20:31:55 <roasbeef> 912 is pretty straight forward, lets ppl add new things that the client can interpret, _maybe_ also needs a feature bit w.r.t critical use cases so a user can know: "ok you must put that thing in the metadata in the onion"
20:32:18 <ariard> okay and the size bound of the new field is only hop payload?
20:32:38 <roasbeef> I think the section where it adds the feature bit for the new thing itself is wrong though? just has 9 there, whereas I think it only needs to be inthe invoice (or maybe not at all?)
20:32:59 <t-bast> roasbeef: that's what 9 is, isn't it? Feature bit only in invoice?
20:33:15 <ariard> roasbeef: agree you assume interactivity with the recipient to learn the payload field
20:33:59 <t-bast> roasbeef: the way I'd use it is that I would set it mandatory in my stateless invoices, since I'll *need* the payer to include it for the payment to succeed
20:34:00 <cdecker[m]> Colliding featurebits?...
20:34:05 <ariard> like yes we only need the feature bit in the invoice, nowhere else ?
20:34:27 <roasbeef> t-bast: ahh duhhh ok ignore me lol
20:34:32 <roasbeef> was expected a letter like the rest :p
20:34:36 <rusty> Yes, and this carries across trivially to bolt12, it's pretty easy.  We need to assign a number though.
20:35:04 <rusty> It's probably useless unless it's an even feature, right?  I mean, if it's optional why bother?
20:35:52 <t-bast> rusty: agreed, I don't see how it could be useful without being mandatory
20:36:08 <t-bast> We don't have a `9+` option like we have for `C+`/`C-` though
20:36:25 <ariard> Well sounds we'll introduce one ?
20:36:43 <rusty> Technically it's not mandatory.  It's just practically mandatory :)
20:36:45 <roasbeef> t-bast: you'd need another bit to force them to know that you want them to use the stateless derivation tho right?
20:37:05 <t-bast> roasbeef: the payer doesn't need to do/know anything
20:37:20 <cdecker[m]> Sort of supercedes payment_secrets though, so we can save some space again
20:37:21 <rusty> roasbeef: the presence of the field is enough,th feature bit is just so old wallets reject it properly rather than wondering why it failed.
20:37:24 <t-bast> roasbeef: they just need to include this tlv in the final payload, all the logic happens at the recipient side
20:37:28 <lnd-bot> [13lightning-rfc] 15TheBlueMatt opened pull request #918: Drop ping sending rate-limit suggestion (06master...062021-09-drop-ping-rl) 02https://github.com/lightningnetwork/lightning-rfc/pull/918
20:38:01 <t-bast> cdecker[m]: good point, the way Joost uses it makes the `payment_secret` redundant
20:38:25 <roasbeef> rusty: t-bast how would they know they _must_ use it like that thuogh?
20:38:31 <roasbeef> since ppl can in theory put w/e data they ant in there?
20:38:31 <rusty> roasbeef: even feature bit they don't understand
20:38:56 <t-bast> roasbeef: no, as a payer you don't put anything in there, you just copy what's inside the invoice into the final payload you'll send to the recipient
20:39:25 <t-bast> roasbeef: the payer doesn't choose what to put in that field, it's like payment_secret, he just pastes what was in the invoice
20:39:42 <ariard> t-bast: though you will need to encode both `payment_secret` and `payment_metadata` as you don't know if the sender support the latter one ?
20:39:48 <roasbeef> yeh even bit
20:39:51 <ariard> at least for a while
20:40:05 <rusty> ariard: no, if they specified metadata they know what they're doing.
20:40:13 <cdecker[m]> Should be optional for the transitory time until senders commonly support it
20:40:18 <roasbeef> t-bast: yes, but I mean how do they know what to copy into where as the payer
20:40:31 <roasbeef> understood the receiver is what's populating the field
20:40:33 <t-bast> roasbeef: gotcha, then it's because it will be a mandatory feature bit in the invoice
20:40:33 <rusty> AFAICT this is a generalized payment_secret in fact.
20:40:43 <cdecker[m]> Otherwise we end up with two QR codes everywhere, one with and one without the data
20:40:54 <roasbeef> ahh ok so we're saying there's always a _specific_ metadata TLV we're using right?
20:40:57 <roasbeef> so it's universal
20:40:58 <t-bast> rusty: exactly, it feels like we could have done a variable-size payment_secret...it would have been more future-prof
20:41:14 <roasbeef> ok totally makes ense now
20:41:14 <ariard> rusty: how the recipient who is issuing the invoice can know that the invoice reader understands the new field?
20:41:15 <rusty> t-bast: yeah, lesson learned.
20:41:15 <roasbeef> sense*
20:41:20 <t-bast> rusty: that's on my for putting only 32 bytes there!
20:41:30 <t-bast> I'll offer Joost a beer to make up for this
20:41:34 <roasbeef> ariard: they set an even bit, if they can't pay it, hopefully the wallet bubbles it up to them
20:41:51 <rusty> ariard: at some point, it has to be forced.  Until then it's unusable.
20:42:03 <cdecker[m]> Exactly
20:42:05 <rusty> Long transition, but "the second best time is today"
20:42:07 <ariard> rusty: i see, so we deploy-and-wait?
20:42:29 <rusty> ariard: yeah.  I wish we had a wallet compatibility matrix for these things :(
20:42:53 <t-bast> Luckily the sender code is really trivial: grab a field from the invoice and put it inside a TLV, so hopefully it ships everywhere soon
20:43:07 <t-bast> Then in months/years we can enjoy this feature :)
20:43:15 <rusty> t-bast: and omit the payment secret, right?
20:43:31 <t-bast> rusty: yep, once the spec PR is updated to say that!
20:43:37 <cdecker[m]> No that needs to stay until migration completes
20:43:53 <rusty> #action joost to update spec to point out this replaces the payment secret in the onion.
20:44:01 <cdecker[m]> It's either secret or data, until data becomes compulsory
20:44:20 <BlueMatt> given we just made payment secret required, I dunno if it "replaces"?
20:44:20 <rusty> cdecker[m]: both must appear in BOLT11 invoice, but you MUST only send one in onion.
20:44:20 <cdecker[m]> Ah, both until data becomes compulsory
20:44:21 <BlueMatt> more that its a generalized form of
20:44:31 <roasbeef> payment secret can just stand on its own really, we already require it for all mpp stuff as is
20:44:35 <cdecker[m]> Correct, was talking about invoice
20:45:05 <ariard> okay more on this topic or we can move on?
20:45:07 <BlueMatt> what roasbeef said, why bother replacing? If you want more data, just add more data, you still probably need at least 32 bytes of random or payment-specific data either way
20:45:15 <t-bast> #action joost to grab feature bits for this
20:45:20 <BlueMatt> its kinda awkward, but no reason to fight the backwards compatibility fight over it.
20:46:29 <rusty> BlueMatt: it's trivial to swap it out, so why do both?  I mean, MPP is unspeced so it can do whatever, but normal payments, seems a waste of space.
20:46:42 <rusty> (keysend MPP that is)