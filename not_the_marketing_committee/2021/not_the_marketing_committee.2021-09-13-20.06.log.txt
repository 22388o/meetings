20:06:20 <rusty> #startmeeting Not the marketing committee
20:06:20 <lndev-bot`> Meeting started Mon Sep 13 20:06:20 2021 UTC and is due to finish in 60 minutes.  The chair is rusty. Information about MeetBot at http://wiki.debian.org/MeetBot.
20:06:20 <lndev-bot`> Useful Commands: #action #agreed #help #info #idea #link #topic #startvote.
20:06:20 <lndev-bot`> The meeting name has been set to 'not_the_marketing_committee'
20:06:20 <lndev-bot> Meeting started Mon Sep 13 20:06:20 2021 UTC and is due to finish in 60 minutes.  The chair is rusty. Information about MeetBot at http://wiki.debian.org/MeetBot.
20:06:20 <lndev-bot> Useful Commands: #action #agreed #help #info #idea #link #topic #startvote.
20:06:20 <lndev-bot> The meeting name has been set to 'not_the_marketing_committee'
20:06:22 <niftynei> two bots for the price of one, of this is exciting
20:06:50 <cdecker[m]> Hurray
20:07:09 <rusty> #topic https://github.com/lightningnetwork/lightning-rfc/pull/834
20:07:13 <cdecker[m]> Stopped one of them, I think it was trying to make up for last time
20:07:28 <niftynei> looks like  lndev-botimous prime has been chosen as the survivor lol ;)
20:08:14 <cdecker[m]> Shouldn't matter, logs and agenda will still work
20:08:35 <t-bast> Go #834, go! I think it's high time this gets merged, we've seen it being useful many times already in the real world (just found a c-lightning issue today thanks to it)
20:08:38 <rusty> OK, I can rebase this.  roasbeef mentioned wanting a feature bit, which in this case seems overkill (you can always still send an erorr)
20:08:40 <BlueMatt> I think the only thing left to resolve on warnings is https://github.com/lightningnetwork/lightning-rfc/pull/834#discussion_r702330608 ?
20:09:28 <BlueMatt> oh, wait, no, still need to resolve the removal of the all-0s error message
20:09:35 <BlueMatt> and whether we want to do that
20:10:51 <BlueMatt> thoughts?
20:10:53 <roasbeef> see my comment on that other PR: there was a new change that depended on this new warning message, but in that case how is the peer meant to even know to expect the warning message if there's no feature bit?
20:11:01 <roasbeef> I don't understand this new aversion to feature bits
20:11:13 <rusty> BlueMatt: yes, I believe you're the only one to support it, and I think you fail them one at a time as reestablish is sent,
20:11:14 <roasbeef> unless you always send the warning _and_ error in all scenarios?
20:11:17 <t-bast> I'm very neutral on whether we should keep all-0s error message or not, I don't mind either way
20:11:26 <BlueMatt> the peer cant "expect a warning message", warning messages are required to be "ignored"
20:11:31 <roasbeef> still as is, I don't really see what this PR does
20:11:37 <roasbeef> it's just the old error message w/ a new name
20:11:48 <rusty> BlueMatt: but if they don't set the feature, you can ignore errors more.
20:11:55 <BlueMatt> rusty: ok, let me rephrase, I think we should *add* an all-0s error message :)
20:12:13 <t-bast> roasbeef: it's an odd message, they've been explicitly created to allow optional things that you don't need to support, there's really 0 reason to have a feature bit for warning messages
20:12:14 <rusty> BlueMatt: OK, I disagree.  It's another implementation details which won't be implemented.
20:12:27 <BlueMatt> why wouldn't you implement it?
20:12:38 <BlueMatt> that's a useful way to say "go away, close the channels, I'm not gonna talk to you anymore"
20:12:44 <BlueMatt> without having to have a reconnect loop
20:12:45 <roasbeef> comment re PR: https://github.com/lightningnetwork/lightning-rfc/pull/904#issuecomment-909815114
20:12:56 <rusty> BlueMatt: I haven't yet.  I never send such a thing, and I can't see why I would.
20:13:05 <t-bast> roasbeef: it helped a lot figure out many bugs in the wild already on our side, so I'd say it has already proven its worth as-is
20:13:06 <roasbeef> so rather than use the explicit feature bit dep system we built in, we now rely on implicit TLV deps?
20:13:17 <BlueMatt> roasbeef: I believe your comment there, really, is more about quick close feature bit, less about warning message feature bit
20:13:50 <rusty> I agree with roasbeef, we should use a feature bit.  And if set, that means errors are *errors*, are genuinely unrecoverable, and you should really drop to chain.
20:13:52 <roasbeef> BlueMatt: no it's about both, the quick close depends on the warning message the way it's written, and we have a natural way to indicate dependent protocol features: the feature bit deps
20:14:09 <niftynei> rusty: "close all channels" is probably more useful if there's more than one channel btw peers :P
20:14:12 <BlueMatt> rusty: ah, as a backwards compat for the implementations that always ignored errors?
20:14:17 <rusty> (And we can drop all our "wait, this is a spurious error, reconnec and try again" logic)
20:14:40 <BlueMatt> roasbeef: outside of the scope of quick close, is there ever a reason why you'd seek out a peer that will send warning messages?
20:14:41 <rusty> BlueMatt: yeah, e.g. LND used to send an error if you were too slow to handshake, and we used to close channels...
20:14:46 <t-bast> Agreed with BlueMatt, we can argue about whether quick close needs a feature bits, but warning messages are really optional messages you're free to ignore but that may help you diagnose issues in the wild, and that doesn't need a feature bit at all, that's why we split messages in odd vs even
20:14:52 <roasbeef> t-bast: bugs related to the warning message? or bugs in new feature that assume the warning message?
20:15:10 <BlueMatt> I do think rusty has a point here, though, I would be in favor of a feature bit that means "yes, errors are errors, follow the spec, stop ignoring them"
20:15:15 <t-bast> roasbeef: bugs in new and old features that now include warning messages which help us figure out what's wrong on the other side
20:15:25 <rusty> t-bast: I disagree, I'd really like to get rid of the cases where c-lightning ignores errors because implementations used to send them.
20:15:40 <roasbeef> t-bast: figruing it out is all manual tho right? given you have no way to programmatically handle the new message as it's just a string?
20:15:58 <BlueMatt> rusty: re: all-0s, I guess I'm still vaguely of the thinking that reconnect loops absolutely suck, and we should stop throwing our hands up and assuming they're ok.
20:16:00 <roasbeef> in which cases would the warning message help you uniquely dianose something that the existing error message would't?
20:16:25 <BlueMatt> roasbeef: yes, because unlike error messages, warning messages dont close the channel.
20:16:34 <t-bast> rusty: we still don't ignore errors and don't plan on starting to ignore them
20:16:58 <BlueMatt> t-bast: do y'all implement the all-0s close-all-channels error logic?
20:17:10 <rusty> t-bast: ouch, we had several cases we had to, to avoid forced closing.  Maybe safe to remove them now...
20:17:14 <roasbeef> BlueMatt: re why would seek them out, assuming it has error codes, then yeah as you're able to programtically handle certain denegrate cases, and also know that you have strucutred data in the errors
20:17:28 <t-bast> roasbeef: even manual, it's a net improvement compared to what we had before, that's the best argument I can have for a feature - it solves a problem we actually have, not a theoretical one
20:17:32 <roasbeef> but it's less about seeking them out, and making it explicit that two protocol features are dependent on each other
20:17:50 <roasbeef> this is the PR that adds that dep btw: https://github.com/lightningnetwork/lightning-rfc/pull/904
20:17:54 <BlueMatt> roasbeef: I'd understand if you added a feature bit for when warnings got a programatic handling support, but that's not what we're talking about here