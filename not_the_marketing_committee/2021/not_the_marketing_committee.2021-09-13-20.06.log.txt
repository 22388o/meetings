20:06:20 <rusty> #startmeeting Not the marketing committee
20:06:20 <lndev-bot`> Meeting started Mon Sep 13 20:06:20 2021 UTC and is due to finish in 60 minutes.  The chair is rusty. Information about MeetBot at http://wiki.debian.org/MeetBot.
20:06:20 <lndev-bot`> Useful Commands: #action #agreed #help #info #idea #link #topic #startvote.
20:06:20 <lndev-bot`> The meeting name has been set to 'not_the_marketing_committee'
20:06:20 <lndev-bot> Meeting started Mon Sep 13 20:06:20 2021 UTC and is due to finish in 60 minutes.  The chair is rusty. Information about MeetBot at http://wiki.debian.org/MeetBot.
20:06:20 <lndev-bot> Useful Commands: #action #agreed #help #info #idea #link #topic #startvote.
20:06:20 <lndev-bot> The meeting name has been set to 'not_the_marketing_committee'
20:06:22 <niftynei> two bots for the price of one, of this is exciting
20:06:50 <cdecker[m]> Hurray
20:07:09 <rusty> #topic https://github.com/lightningnetwork/lightning-rfc/pull/834
20:07:13 <cdecker[m]> Stopped one of them, I think it was trying to make up for last time
20:07:28 <niftynei> looks like  lndev-botimous prime has been chosen as the survivor lol ;)
20:08:14 <cdecker[m]> Shouldn't matter, logs and agenda will still work
20:08:35 <t-bast> Go #834, go! I think it's high time this gets merged, we've seen it being useful many times already in the real world (just found a c-lightning issue today thanks to it)
20:08:38 <rusty> OK, I can rebase this.  roasbeef mentioned wanting a feature bit, which in this case seems overkill (you can always still send an erorr)
20:08:40 <BlueMatt> I think the only thing left to resolve on warnings is https://github.com/lightningnetwork/lightning-rfc/pull/834#discussion_r702330608 ?
20:09:28 <BlueMatt> oh, wait, no, still need to resolve the removal of the all-0s error message
20:09:35 <BlueMatt> and whether we want to do that
20:10:51 <BlueMatt> thoughts?
20:10:53 <roasbeef> see my comment on that other PR: there was a new change that depended on this new warning message, but in that case how is the peer meant to even know to expect the warning message if there's no feature bit?
20:11:01 <roasbeef> I don't understand this new aversion to feature bits
20:11:13 <rusty> BlueMatt: yes, I believe you're the only one to support it, and I think you fail them one at a time as reestablish is sent,
20:11:14 <roasbeef> unless you always send the warning _and_ error in all scenarios?
20:11:17 <t-bast> I'm very neutral on whether we should keep all-0s error message or not, I don't mind either way
20:11:26 <BlueMatt> the peer cant "expect a warning message", warning messages are required to be "ignored"
20:11:31 <roasbeef> still as is, I don't really see what this PR does
20:11:37 <roasbeef> it's just the old error message w/ a new name
20:11:48 <rusty> BlueMatt: but if they don't set the feature, you can ignore errors more.
20:11:55 <BlueMatt> rusty: ok, let me rephrase, I think we should *add* an all-0s error message :)
20:12:13 <t-bast> roasbeef: it's an odd message, they've been explicitly created to allow optional things that you don't need to support, there's really 0 reason to have a feature bit for warning messages
20:12:14 <rusty> BlueMatt: OK, I disagree.  It's another implementation details which won't be implemented.
20:12:27 <BlueMatt> why wouldn't you implement it?
20:12:38 <BlueMatt> that's a useful way to say "go away, close the channels, I'm not gonna talk to you anymore"
20:12:44 <BlueMatt> without having to have a reconnect loop
20:12:45 <roasbeef> comment re PR: https://github.com/lightningnetwork/lightning-rfc/pull/904#issuecomment-909815114
20:12:56 <rusty> BlueMatt: I haven't yet.  I never send such a thing, and I can't see why I would.
20:13:05 <t-bast> roasbeef: it helped a lot figure out many bugs in the wild already on our side, so I'd say it has already proven its worth as-is
20:13:06 <roasbeef> so rather than use the explicit feature bit dep system we built in, we now rely on implicit TLV deps?
20:13:17 <BlueMatt> roasbeef: I believe your comment there, really, is more about quick close feature bit, less about warning message feature bit
20:13:50 <rusty> I agree with roasbeef, we should use a feature bit.  And if set, that means errors are *errors*, are genuinely unrecoverable, and you should really drop to chain.
20:13:52 <roasbeef> BlueMatt: no it's about both, the quick close depends on the warning message the way it's written, and we have a natural way to indicate dependent protocol features: the feature bit deps
20:14:09 <niftynei> rusty: "close all channels" is probably more useful if there's more than one channel btw peers :P
20:14:12 <BlueMatt> rusty: ah, as a backwards compat for the implementations that always ignored errors?
20:14:17 <rusty> (And we can drop all our "wait, this is a spurious error, reconnec and try again" logic)
20:14:40 <BlueMatt> roasbeef: outside of the scope of quick close, is there ever a reason why you'd seek out a peer that will send warning messages?
20:14:41 <rusty> BlueMatt: yeah, e.g. LND used to send an error if you were too slow to handshake, and we used to close channels...
20:14:46 <t-bast> Agreed with BlueMatt, we can argue about whether quick close needs a feature bits, but warning messages are really optional messages you're free to ignore but that may help you diagnose issues in the wild, and that doesn't need a feature bit at all, that's why we split messages in odd vs even
20:14:52 <roasbeef> t-bast: bugs related to the warning message? or bugs in new feature that assume the warning message?
20:15:10 <BlueMatt> I do think rusty has a point here, though, I would be in favor of a feature bit that means "yes, errors are errors, follow the spec, stop ignoring them"
20:15:15 <t-bast> roasbeef: bugs in new and old features that now include warning messages which help us figure out what's wrong on the other side
20:15:25 <rusty> t-bast: I disagree, I'd really like to get rid of the cases where c-lightning ignores errors because implementations used to send them.
20:15:40 <roasbeef> t-bast: figruing it out is all manual tho right? given you have no way to programmatically handle the new message as it's just a string?
20:15:58 <BlueMatt> rusty: re: all-0s, I guess I'm still vaguely of the thinking that reconnect loops absolutely suck, and we should stop throwing our hands up and assuming they're ok.
20:16:00 <roasbeef> in which cases would the warning message help you uniquely dianose something that the existing error message would't?
20:16:25 <BlueMatt> roasbeef: yes, because unlike error messages, warning messages dont close the channel.
20:16:34 <t-bast> rusty: we still don't ignore errors and don't plan on starting to ignore them
20:16:58 <BlueMatt> t-bast: do y'all implement the all-0s close-all-channels error logic?
20:17:10 <rusty> t-bast: ouch, we had several cases we had to, to avoid forced closing.  Maybe safe to remove them now...
20:17:14 <roasbeef> BlueMatt: re why would seek them out, assuming it has error codes, then yeah as you're able to programtically handle certain denegrate cases, and also know that you have strucutred data in the errors
20:17:28 <t-bast> roasbeef: even manual, it's a net improvement compared to what we had before, that's the best argument I can have for a feature - it solves a problem we actually have, not a theoretical one
20:17:32 <roasbeef> but it's less about seeking them out, and making it explicit that two protocol features are dependent on each other
20:17:50 <roasbeef> this is the PR that adds that dep btw: https://github.com/lightningnetwork/lightning-rfc/pull/904
20:17:54 <BlueMatt> roasbeef: I'd understand if you added a feature bit for when warnings got a programatic handling support, but that's not what we're talking about here
20:18:02 <BlueMatt> roasbeef: the warning messages in this pr *MUST* be ignored
20:18:20 <BlueMatt> roasbeef: we can revisit the feature bit discussion when y'all add the "programatic why we warned" logic in the tlv
20:18:29 <t-bast> BlueMatt: we did have the close-all-channels on all-0s error, but we may have removed it recently, I'll need to check
20:18:42 <roasbeef> BlueMatt: which PR #904?
20:19:08 <BlueMatt> roasbeef: no, 834. 904 would again be a conversation about quick close feature bits, which seems separate from just warning messages?
20:19:09 <roasbeef> yeah we're moving forward w/ the TLVs on our end, likely just in the old error message though, given the warning message is identical
20:19:33 <BlueMatt> roasbeef: I mean error already has programatic handling assigned to it - close the channel.
20:19:36 <niftynei> but it's not identical
20:19:37 <roasbeef> must be ignored? totally confused
20:19:39 <BlueMatt> roasbeef: not sure what else you'd want to add?
20:20:06 <BlueMatt> the current warning message, because it has nothing but a string, must be ignored from a logic perspective. you can go log it, tell the user, whatever, but you can't *do* something
20:20:09 <roasbeef> the close channel clause is essentially deprecated, no one does it
20:20:13 <t-bast> rusty: yeah I think nowadays you shouldn't have too may issues re-activating the logic of force-closing when you receive an error, it's not biting us at all on our node
20:20:24 <BlueMatt> roasbeef: we do it, eclair does it, and c-lightning is planning on doing it, maybe with a feature bit
20:20:29 <BlueMatt> so, no, its not deprecated
20:20:51 <t-bast> rusty: it was an issue at some point and we've had unwanted channel closure, but it's gotten much better in the last 12 months to be honest
20:21:10 <BlueMatt> I've *never* seen an unwanted channel closure as the result of an error message, fwiw :)
20:21:24 <roasbeef> it's ill advised imo, which is why it never really caught on
20:22:06 <rusty> roasbeef: wait, t-bast just said they're force-closing on all errors.  I double-checked c-lightning, we gave up and are ignoring all errors :(  We reconnect though
20:22:07 <t-bast> BlueMatt: you arrived on mainnet at the right time, after the nastyness happened xD
20:22:15 <BlueMatt> t-bast: I'm aware
20:22:27 <BlueMatt> roasbeef: its ill advised to tell your peer that you're broadcasting the local state? that just seems like an incredibly helpful and nice thing to do.
20:22:32 <roasbeef> rusty: so then just eclair force closes?
20:22:47 <t-bast> roasbeef: yes, when we receive an error we do
20:22:48 <roasbeef> BlueMatt: you can do that w/ an error message, but doesn't mean they need to force close
20:22:49 <rusty> roasbeef: and LDK it seems.
20:23:28 <roasbeef> say "I broadcasted btw, it's in the mempool" is totally useful, but rn we don't have a way to allow nodes to properly handle that, since it's just a string
20:23:32 <BlueMatt> roasbeef: sure, I mean they dont have to broadcast, but its a really great way to say "dont try to route over this again, dont expect me to accept anything, you should give up on this channel"
20:23:45 <roasbeef> lnd doesn't watch the mempool though, so we'll only note that once it hits the chain
20:24:02 <roasbeef> yeh that sounds useful, but we don't have a way to do that atm w/ just the string
20:24:03 <BlueMatt> yes, we do have a way to tell a node that, the error message!
20:24:22 <BlueMatt> sending an error message with a channel_id set is *exactly* that, according to the spec, and the way eclair and LDK have implemented it
20:24:33 <BlueMatt> I understand historically that was not practical, but those nodes hardly exist anymore.
20:24:37 <rusty> I think warning is still useful, as there are cases which are recoverable (esp since reconnection does reset some state).
20:24:58 <BlueMatt> now, as an alternative to the current warning message pr, we *could* swap the message types
20:25:02 <rusty> But yes, you have to avoid looping too hard.