20:04:59 <valwal> #startmeeting meeting-name
20:04:59 <lndev-bot> Meeting started Mon Aug 16 20:04:59 2021 UTC and is due to finish in 60 minutes.  The chair is valwal. Information about MeetBot at http://wiki.debian.org/MeetBot.
20:04:59 <lndev-bot> Useful Commands: #action #agreed #help #info #idea #link #topic #startvote.
20:04:59 <lndev-bot> The meeting name has been set to 'meeting_name'
20:05:13 <valwal> #topic warnings
20:05:33 <ariard> t-bast: yeah and i've discussed with other coredev orgas and they're okay to distribute more LN-invits :)
20:05:43 <BlueMatt> valwal: you gots to startmeeting
20:05:43 <BlueMatt> with the #s
20:05:54 <niftynei> she did! lol
20:06:02 <niftynei> i think we're on topic "warnings"
20:06:15 <BlueMatt> I left a number of comments on the pr
20:06:21 <BlueMatt> so waiting on those to be responded to
20:06:32 <BlueMatt> t-bast: commented as well, and i think we agreed on some proposed changes
20:06:32 <t-bast> Sounds like rusty needs to rebase and address comments
20:06:35 <BlueMatt> further, the pr needs to be rebased
20:06:40 <t-bast> But generally it's a concept ACK, right?
20:06:44 <BlueMatt> so i think its basically a "waiting on rusty to respond" thing
20:06:55 <valwal> ok
20:07:04 <valwal> #topic channel_type s
20:07:12 * rusty wakes up
20:07:27 <valwal> oh hey rusty!
20:07:33 <t-bast> hey rusty!
20:07:49 <BlueMatt> yea, def concept ack here, iirc lnd even has a pr to implement it
20:08:07 <rusty> OK, I will respond on PR.  I basically plastered advice over everywhere we said you MUST erorr, wherever it was theoretically psosible to recover, said you MAY send warning.
20:08:25 <rusty> (You can still send error!  And if you've closed, of course you should)
20:08:43 <BlueMatt> yea, the LDK implementation of the warnings message stuff that I pr'd largely ignored half of the error -> warning changes, since I'm not a fan of them and needs discussion on the pr :)
20:08:55 <niftynei> is it correct to say that "error -> close channel"/ "warning -> disconnect" or is that too broad a generalization
20:09:16 <BlueMatt> niftynei: no, you shouldnt even disconnect on warning
20:09:23 <t-bast> niftynei: usually it's even better to send a warning without disconnecting
20:09:42 <t-bast> niftynei: to avoid reconnect loops where your peer resends the same problematic message
20:09:49 <roasbeef> guess depends on what bleeds over to this new message, imo we should just have a new one that replaces all usage of the prior error message w/ richer context
20:09:49 <rusty> niftynei: error is "I have closed the channel, you should too", basically.
20:10:22 <roasbeef> most valuable error I've seen in the wild so far is the error when you get an invalid sig, have used that to find a bunch of state machine divergences within lnd, and most recently that HTLC ordering issue
20:10:40 <niftynei> the dual-funding impl in c-lightning uses warnings pretty much entirely; it fails the connection also tho as a sign to restart the negotiation. but that's maybe a niche case
20:10:54 <t-bast> roasbeef: true, that's the error that helped figure out many real bugs in the wild
20:11:10 <BlueMatt> roasbeef: that seems like a wholly separate discussion
20:11:25 <BlueMatt> roasbeef: the current warning pr is all about "how to tell the counterparty that you're *not* closing the channel but something happened
20:11:29 <rusty> BlueMatt: true, but it'd be a nice discussion to have.  Fortunately both warning and error are extensible.
20:11:32 <t-bast> niftynei: gotcha, disconnecting makes sense in that case, it's probably a case-by-case basis whether you should disconnect after sending a warning or not
20:11:36 <BlueMatt> roasbeef: if you want rich errors or whatever, we can do that in a new message.
20:11:43 <BlueMatt> or extending error/warning, as rusty notes
20:11:48 <niftynei> since "establishing a channel" you can safely restart the negotiation etc, yeah ok seems like a niche rather than a broad rule
20:12:37 <BlueMatt> rusty: indeed, its maybe a good thing to do, but I do feel like it needs at least a strawman proposal before we have a live discussion, otherwise we go in circles forever :)
20:12:43 <roasbeef> how useful will this warning message be if there's no new strucutred information? means we just all need to string match again...
20:13:00 <roasbeef> there's an ML thread where carla and rusty have started to work out a more structutred approach, I thought that was meant to be a part of this?
20:13:02 <BlueMatt> roasbeef: it allows you to implement error messages properly again :p
20:13:03 <t-bast> roasbeef: it's really useful in closing negotiation for example
20:13:16 <BlueMatt> ie, actually close the channel
20:13:21 <t-bast> roasbeef: and when using channel_type to open a new channel with a non-default type
20:13:28 <ariard> niftynei: afaict your usage of the warnings in the dual-funding context to rollback your negotiation matches the richer error context intent of roasbeef?
20:13:29 <roasbeef> t-bast: yeh I can see that being the case, but will it be if ppl send diff error strings vs having structured records? (using TLV)
20:13:49 <BlueMatt> roasbeef: yep, we can extend these messages with tlvs when there's a spec for it :)
20:13:52 <roasbeef> and the chan_type case is one that can be programtically handled most of the time
20:13:57 <t-bast> roasbeef: I agree it's still just a string that the node operator needs to understand, but it's a good thing to start with!
20:14:04 <rusty> roasbeef: nah, this predates that, it's old...
20:14:07 <BlueMatt> in the mean time, just *adding* the warning message is nice, cause we can use it in places where we dont want to close the channel but want to notify an error
20:14:26 <BlueMatt> cause its actually nice that we have the error messages which close channels imo
20:14:31 <BlueMatt> or notify counterparties we've closed
20:14:35 <roasbeef> if there's no new structured data, then how's this imrpove on the other error at all?
20:14:44 <roasbeef> given you can also use that to send out message, and most impls don't auto force close on it anymore
20:14:52 <t-bast> I agree with BlueMatt, it's already helpful in practice so let's roll it out, and improve later by adding more structure as we discover what we often need
20:14:56 <ariard> roasbeef: not force-closing the chan
20:15:16 <BlueMatt> roasbeef: yep, so we should *start* force closing on errors again :)
20:15:19 <ariard> which we already do quite liberally in LDK
20:15:23 <BlueMatt> cause, like, that's what the spec does
20:15:37 <roasbeef> that was always a dubious requirement imo
20:15:40 <BlueMatt> roasbeef: if you feel strongly, I suppose we could change the *current* error message message type to "warning" and add a new error message :)
20:15:50 <BlueMatt> roasbeef: its more "I've closed the channel, you should too, cause its gone"
20:15:52 <roasbeef> caused a lot of force closes early on when ppl disgareed on fees
20:16:28 <roasbeef> BlueMatt: yeh carla is working on that, there's a thread on the ML tracking the latest discussion (either new message or just extend prior w/ TLV data to be parsed)
20:16:38 <BlueMatt> roasbeef: no again thats separate
20:16:48 <BlueMatt> adding a tlv to indicate a type is something we can do *on top*
20:17:07 <niftynei> ariard: not exactly, it's still "string messages that need to be parsed", but you could definitely codify the errors via a TLV in the warnings!
20:17:34 <BlueMatt> roasbeef: do you have a specific suggestion for the warning message prs aside from "I dont care about this"?
20:17:43 <BlueMatt> because otherwise I think we can just go forward with it
20:17:45 <roasbeef> BlueMatt: agree we can do on top, but don't see what just another error message delivers
20:17:56 <niftynei> there's probably a nice set of error states in the open to encode too, channel-type being one of them
20:18:05 <ariard> niftynei: gotcha, it's still seems a in-the-middle solution where you're parsing human-readable destinaed output to have machine-level automatic reactions
20:18:12 <BlueMatt> roasbeef: other people here seem to think its valuable to be able to communicate that a channel is closed. I tend to agree
20:18:28 <roasbeef> niftynei: yeh see this mail: https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-July/003142.html
20:18:34 <BlueMatt> roasbeef: if you dont, that's ok, we can still do it and you can just log that the channel is closed and make your users do more work.
20:18:39 <niftynei> like that's (channel opens) are probably the highest value place to add codified errors
20:18:46 <roasbeef> why can't the erorr be used for that? particularluy if the channel is closed, then the chan_id isn't really a thing anymore
20:19:05 <BlueMatt> roasbeef: it can be, it can be added on top if it!
20:19:19 <BlueMatt> because that error (a) requires more discussion, (b) isn't broadly implemented, (c) isnt even a spec pr
20:19:29 <roasbeef> so then the same meessage can just be used and we don't need a new one...?
20:19:35 <BlueMatt> "i want to delay to add more stuff" is generally not a valid objection unless "more stuff" is quick and easy :)
20:19:46 <BlueMatt> roasbeef: yes, you can always add tlvs at the end of any message
20:19:48 <BlueMatt> to provide more context
20:19:48 <niftynei> well, you definitely have errors in the open that are distinct from warnings
20:20:03 <roasbeef> rather than delay, I don't see the motivation here given error already exists, and this is just that w/ a diff type
20:20:04 <ariard> roasbeef: yeah i think that's matt proposal to merge the future carla's richer-context-error proposal in the warning message thanks to TLV
20:20:26 <niftynei> e.g. once the channel commitments have been exchanged, you error to signal you're going to chain
20:20:46 <BlueMatt> you want more context in errors/warnings, great! lets add warnings and then we can slap the tlv on the end! everyone gets what they want and y'all dont hold up progress for perfection :)
20:21:01 <t-bast> TBH the current state sounds really simple to me: errors and warnings are two different things (should be obvious), it's good to have both, currently it's just an unstructured string, later we can add structure in tlv to automate reactions. That's it!
20:21:01 <niftynei> if you're RBF'ing an extant open attempt, you still want warnings to signal you're failing the re-negotiation, not closing the channel
20:21:31 <roasbeef> as is, the warning says it should be text based again, so you can't add a TLV there
20:21:45 <roasbeef> since it inherits the ascii req afaict
20:21:47 <BlueMatt> yes you can
20:21:52 <BlueMatt> its length-delimited
20:21:56 <t-bast> as all lightning messages it has a trailing tlv stream
20:22:00 <BlueMatt> you can trivially add anything to the message end
20:22:16 <roasbeef> t-bast: as I've always said, traliling tlv infront of var sized field doesn't really work imo
20:22:20 <BlueMatt> #action rusty to rebase and respond to comments on warning
20:22:23 <BlueMatt> next topic
20:22:27 <roasbeef> since you can run out of space there
20:22:34 <BlueMatt> you can run out of space in any message
20:22:36 <BlueMatt> come on man
20:22:36 <valwal> #topic channel_type negotiation
20:22:37 <BlueMatt> lets move on
20:22:56 <valwal> we can circle back if we finish everything else (lol)
20:23:01 <roasbeef> BlueMatt: no...open channel as is doesn't have var sized fields as an example
20:23:41 <t-bast> roasbeef: just send an empty string when you want to put tlvs then, there's nothing complicated here...please le'ts move to other topics, feel free to comment on the PR to elaborate?
20:23:52 <BlueMatt> where are we on channel_type negotiation, are you happier with where it went, roasbeef?
20:24:18 <t-bast> I've got channel_type ready in eclair, and found a few issues when testing compatibility with c-lightning
20:24:24 <roasbeef> t-bast: I think should be continued in that ML thread, will reply there, as there's till more to explore there and even just motivation for adding a new message that's exactly the same as another one w/ no added benefit
20:24:33 <t-bast> rusty did you have time to check my comments on your c-lightning PR?
20:24:35 <roasbeef> we have an impl of chan type now, need to do interop testing
20:24:50 <roasbeef> t-bast: anything you ran into that you think may bleed over to othe rimpls?
20:25:11 <t-bast> roasbeef: it really looks like simple bugs in the implementation, nothing spec-related AFAICT
20:25:24 <t-bast> roasbeef: if you have an lnd branch to share I can test it against eclair tomorrow!
20:25:25 <rusty> t-bast: sorry, will have to rebase and get back to this.
20:25:47 <roasbeef> t-bast: it's here: https://github.com/lightningnetwork/lnd/pull/5373
20:26:11 <t-bast> rusty: no worries, just ping me when it's ready and I'll run my test scripts
20:26:21 <t-bast> roasbeef: cool thanks, I'll test it
20:26:33 <BlueMatt> cool
20:26:39 <BlueMatt> #action t-bast and roasbeef to do cross-impl testing
20:26:41 <BlueMatt> next topic?
20:26:43 <roasbeef> the PR let us simplify our integration tests a good bit too, since we can just add the type vs the build tag, etc, etc
20:26:51 <valwal> #topic Updated closing_signed fee requirements #847
20:26:54 <BlueMatt> even nicer, roasbeef!
20:26:55 <roasbeef> who's driving the bot rn? isn't it tied to a single person?
20:27:08 <BlueMatt> roasbeef: valwal is, but i thought anyone could action?
20:27:14 <roasbeef> ah maybe, idk
20:27:18 <gene> hi
20:27:19 <roasbeef> guess we'll find out at the end kek
20:27:29 <cdecker[m]> Valwal is chairing
20:27:38 <BlueMatt> it seems there's rough agreement on 847, at least no objections on the pr
20:27:48 <BlueMatt> t-bast: and I need to do cross-impl testing, I think, and then it can land?
20:27:51 <BlueMatt> any objections?
20:28:01 <BlueMatt> and/or with c-lightning folks, who've also mayne implemented it?
20:28:23 <t-bast> I'd love to land this one!
20:28:38 <roasbeef> t-bast: do you expose the knob to users (picking a chan type in the open chan API)? and if so, is it a type or do you let them flip each of teh bits? just curious from an API perspective as that came up in ours during review
20:28:42 <BlueMatt> there's also a number of dust concerns related to closing-transactions exposed today, looks like everyone except eclair currently allows nodes to set a dust limit which causes closing tx to be unspendable
20:29:02 <BlueMatt> but i think that needs a larger closing_signed change
20:29:06 <BlueMatt> so would propose it happen in a new pr
20:29:15 <t-bast> roasbeef: yes, I've defined a string enum of channel_types that the user can chose in the `open` API, and then we communicate back whether it was rejected by the other side or not
20:29:31 <roasbeef> BlueMatt: why would it cause to to be unspendable? assuming impls to verification that rejects bad dust values that is
20:29:54 <BlueMatt> roasbeef: well right now lnd doesn't (as far as I can tell) verify the counterparty-set dust limit at all, despite the spec saying you must :p
20:29:55 <ariard> BlueMatt: i think we allow p2pkh/p2sh closing outputs on the ldk side, our max dust_limit_satoshis is 660
20:29:57 <roasbeef> or I guess unbroadcastable? q still stands
20:29:58 <ariard> sats
20:29:59 <BlueMatt> roasbeef: but, more broadly, read your email!
20:30:05 <t-bast> BlueMatt: ACK on fixing these dust issues in a separate PR, to allow #847 to land sooner
20:30:15 <roasbeef> it does, but it can be improved ;)
20:30:32 <t-bast> ariard: the issue is not your max dust_limit but rather your min
20:30:33 <roasbeef> yeh dust is a can of worms
20:30:44 <BlueMatt> roasbeef: can you point to where? The only thing I found looking for it was checking an upper-bound, not a lower-bound, and eugene appeared to confirm that was the case.
20:30:48 <t-bast> roasbeef: yes, it's just unbroadcastable
20:30:48 <ariard> t-bast: yeah let's fix dust separate from 846
20:30:52 <ariard> *847
20:31:03 <rusty> Yes, ack 847.
20:31:29 <BlueMatt> ok, so no objections to (a) cross-impl testing then merging 847, (b) fixing dust in closing transactions in a new pr.
20:31:31 <BlueMatt> next topic?
20:31:34 <t-bast> rusty: BTW on #847 my latest tests against c-lightning were green, nothing weird came out
20:31:42 <t-bast> BlueMatt: ACK
20:31:44 <Crypt-iq> so coop closing doesn't take into account output type dust limits roasbeef
20:31:44 <rusty> t-bast: thans!
20:31:53 <valwal> #topic BLIPs
20:31:54 <BlueMatt> t-bast: have y'all done cross-imppl testing? I think in that case we can land now?
20:31:56 <Crypt-iq> ie spending to a p2pkh < 546, p2sh < 540